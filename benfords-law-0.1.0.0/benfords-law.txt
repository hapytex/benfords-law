-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Determining probabilities and generating sequences according to Benford's law.
--   
--   Determining probabilities and generating sequences according to
--   Benford's law.
@package benfords-law
@version 0.1.0.0


-- | This module makes it possible to calculate probabilities and generate
--   sequences specified by <i>Benford's law</i>.
module Number.Benford

-- | Determine the probability for a given digit to be the first digit for
--   a number in a number system with a given radix.
firstDigit :: Floating a => Int -> Int -> Maybe a

-- | Determine the probability of the first digit for a <i>decimal</i>
--   system.
firstDigit10 :: Floating a => Int -> Maybe a

-- | Determine the probability of the first digit for a number system with
--   a given radix.
firstDigit' :: Floating a => Int -> Int -> a

-- | Determine the probability of the first digit in a <i>decimal</i>
--   system.
firstDigit10' :: Floating a => Int -> a

-- | Determine the probability of a number in a number system with the
--   given radix, to start with the given sequence of digits. Leading zeros
--   are ignored and the digits are assumed to be valid digits (greater
--   than or equal to zero, and less than the radix).
startSequence' :: Floating a => Int -> [Int] -> a

-- | Determine the probability of the sequence starting with the given
--   digits of a binary number. Binary numbers always start with
--   <tt>1</tt>. If you thus call <tt>startSequence2' 9</tt>, you get the
--   probability of a binary number starting with <tt>1</tt>, <tt>0</tt>,
--   <tt>0</tt>, and <tt>1</tt> as binary digits.
startSequence2' :: (Integral i, Floating a) => i -> a

-- | Determine the probability of the sequence starting with the given
--   digits. The leading zeros are ignored. If you thus call
--   <tt>startSequence10' 1425</tt>, you obtain the probability of a number
--   starting with <tt>1</tt>, <tt>4</tt>, <tt>2</tt>, and <tt>5</tt> as
--   digits.
startSequence10' :: (Integral i, Floating a) => i -> a

-- | Determine the probability of a number in a number system with the
--   given radix to start with the given sequence of digits, leading zeros
--   are ignored. The function will return a <a>Nothing</a> in case the
--   radix or the digit sequence is invalid.
startSequence :: Floating a => Int -> [Int] -> Maybe a

-- | Determine the probability of the sequence starting with the given
--   digits of a binary number. Binary numbers always start with
--   <tt>1</tt>. If you thus call <tt>startSequence2' 9</tt>, you get the
--   probability of a binary number starting with <tt>1</tt>, <tt>0</tt>,
--   <tt>0</tt>, and <tt>1</tt> as binary digits. The result is wrapped in
--   a <a>Just</a>; if the value is less than zero, <a>Nothing</a> is
--   returned.
startSequence2 :: (Integral i, Floating a) => i -> Maybe a

-- | Determine the probability of the sequence starting with the given
--   digits. The leading zeros are ignored. If you thus call
--   <tt>startSequence10' 1425</tt>, you obtain the probability of a number
--   starting with <tt>1</tt>, <tt>4</tt>, <tt>2</tt>, and <tt>5</tt> as
--   digits. The result is wrapped in a <a>Just</a>; if the value is less
--   than zero, <a>Nothing</a> is returned.
startSequence10 :: (Integral i, Floating a) => i -> Maybe a
